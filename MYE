if getgenv().WhoreHubAuth == "WhoreHubKey-UAjSlXWbuNB1JsbdamK1" or "WhoreHubKey-7DcojZUG9jk3w2WAV6b8" then
    repeat
        task.wait()
    until game:IsLoaded()

    if not game:IsLoaded() then
        game.Loaded:Wait()
    end
    RAPValues = require(game:GetService("ReplicatedStorage").Library.Client.DevRAPCmds)
    local function GetItemRAP(Class, itemTable)
        return (RAPValues.Get(
            {
                Class = {Name = Class},
                IsA = function(InputClass)
                    return InputClass == Class
                end,
                GetId = function()
                    return itemTable.id
                end,
                StackKey = function()
                    return game:GetService("HttpService"):JSONEncode(
                        {id = itemTable.id, pt = itemTable.pt, sh = itemTable.sh, tn = itemTable.tn}
                    )
                end
            }
        ) or nil)
    end
    if not settings then
        os.exit()
    end

    local tpToBooth = true
    local discordwebhook = getgenv().webhook
    local function suffix(price)
        if price >= 1000 then
            local abbriveate = {"", "k", "m", "b", "t"} -- por que suffix? hahaha
            local lol = 1

            while price >= 1000 do
                price = price / 1000
                lol = lol + 1
            end

            return string.format("%.0f%s", price, abbriveate[lol])
        else
            return tostring(price)
        end
    end
    local function webhook(type, amt, price, seller, left, rap)
        url = discordwebhook
        local data = {
            ["content"] = "You got something!",
            ["username"] = "Sniper Bot",
            ["embeds"] = {
                {
                    ["type"] = "rich",
                    ["color"] = 16711680,
                    ["author"] = {
                        ["name"] = "How many diamonds left?: " .. suffix(left)
                    },
                    ["fields"] = {
                        {
                            ["name"] = "Who sold you it?",
                            ["value"] = seller,
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Item",
                            ["value"] = type,
                            ["inline"] = true
                        },
                        {
                            ["name"] = "How many items?",
                            ["value"] = amt,
                            ["inline"] = false
                        },
                        {
                            ["name"] = "Cost",
                            ["value"] = suffix(price) .. " Diamonds (" .. suffix((amt * price)) .. ")",
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Rap Cost",
                            ["value"] = suffix(rap) .. " Diamonds (" .. suffix((amt * rap)) .. ")",
                            ["inline"] = true
                        },
                        {
                            ["name"] = "Profit (in rap)",
                            ["value"] = suffix(rap) .. " Diamonds (" .. suffix(((amt * rap) - (amt * price))) .. ")",
                            ["inline"] = false
                        }
                    }
                }
            }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)

        local headers = {
            ["content-type"] = "application/json"
        }

        request = http_request or request or HttpPost or syn.request
        local a = {Url = url, Body = newdata, Method = "POST", Headers = headers}

        request(a)
    end

    repeat
        task.wait()
    until game:IsLoaded()
    repeat
        task.wait()
    until game.PlaceId ~= nil
    repeat
        task.wait()
    until not game.Players.LocalPlayer.PlayerGui:FindFirstChild("__INTRO")
    repeat
        task.wait()
    until game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.Character and
        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
    if game.PlaceId == 8737899170 or game.PlaceId == 16498369169 then
        local map =
            game:GetService("Workspace"):FindFirstChild("Map") or game:GetService("Workspace"):FindFirstChild("Map2")
        repeat
            task.wait()
        until #map:GetChildren() >= 25
        game:GetService("TeleportService"):Teleport(15502339080, game.Players.LocalPlayer)
    elseif game.PlaceId == 15502339080 then
        repeat
            task.wait()
        until game:GetService("Workspace").__THINGS and game:GetService("Workspace").__DEBRIS
    else
        print("get on pet sim you rider")
    end

    repeat
        task.wait()
    until game:GetService("Players").LocalPlayer:FindFirstChild("PlayerScripts"):FindFirstChild("Scripts"):FindFirstChild(
        "Game"
    ):FindFirstChild("Trading Plaza"):FindFirstChild("Booths Frontend")

    print("main loaded")

    e = getsenv(game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Game["Trading Plaza"]["Booths Frontend"])
    local save = require(game:GetService("ReplicatedStorage").Library.Client.Save)

    if not isfolder("MyeSniper") then
        makefolder("MyeSniper")
        task.wait(0.1)
        writefile("MyeSniper/hasHopped.txt", "false")
    end

    local function getUserFromId(id)
        for i, v in pairs(game.Players:GetPlayers()) do
            if v.UserId == id then
                return v.DisplayName
            end
        end
        return nil
    end

    local inv
    repeat
        task.wait()
        pcall(
            function()
                inv = save.Get()["Inventory"]
            end
        )
    until inv ~= nil

    local money = 0
    for i, v in pairs(save.Get().Inventory.Currency) do
        if v.id == "Diamonds" then
            money = v._am
        end
    end

    local randTable
    local function infoHanlder()
        randTable = settings[math.random(1, #settings)]
        local ohString2
        if randTable.class == "Charm" or randTable.class == "Enchant" or randTable.class == "Potion" then
            ohString2 = string.format('{"id":"' .. randTable.item .. '","tn":%d}', randTable.tier or 1)
        elseif randTable.class == "Pet" then
            ohString2 = '{"id":"' .. randTable.item .. '"'
            if randTable.tier then
                ohString2 = string.format(ohString2 .. ',"tn":%d', randTable.tier)
            end
            if randTable.shiny then
                ohString2 = ohString2 .. ',"sh":' .. tostring(randTable.shiny)
            end
            ohString2 = ohString2 .. "}"
        else
            ohString2 = '{"id":"' .. randTable.item .. '"'
            if randTable.tier then
                ohString2 = string.format(ohString2 .. ',"tn":%d', randTable.tier)
            end
            ohString2 = ohString2 .. "}"
        end
        print("searching for item: " .. randTable.item)

        local ohNil3 = nil
        local ohBoolean4 = true
        local info
        pcall(
            function()
                info =
                    game:GetService("ReplicatedStorage").Network.TradingTerminal_Search:InvokeServer(
                    randTable.class,
                    ohString2,
                    ohNil3,
                    ohBoolean4
                )
            end
        )
        if info == nil then
            local info
            repeat
                pcall(
                    function()
                        info =
                            game:GetService("ReplicatedStorage").Network.TradingTerminal_Search:InvokeServer(
                            randTable.class,
                            ohString2,
                            ohNil3,
                            ohBoolean4
                        )
                        task.wait(1)
                        randTable = settings[math.random(1, #settings)]
                        if not randTable.tier then
                            ohString2 = '{"id":"' .. randTable.item .. '"}'
                        else
                            ohString2 = string.format('{"id":"' .. randTable.item .. '","tn":%d}', randTable.tier)
                        end
                    end
                )
            until info ~= nil

            task.wait(3)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                workspace.TradingPlaza.INTERACT.Machines.TradingTerminal.Pad.CFrame
            task.wait(getgenv().HopDelay)
            game:GetService("TeleportService"):TeleportToPlaceInstance(
                info.place_id,
                info.job_id,
                game.Players.LocalPlayer
            )
            writefile("MyeSniper/hasHopped.txt", "true")
        else
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                workspace.TradingPlaza.INTERACT.Machines.TradingTerminal.Pad.CFrame
            task.wait(getgenv().HopDelay)
            game:GetService("TeleportService"):TeleportToPlaceInstance(
                info.place_id,
                info.job_id,
                game.Players.LocalPlayer
            )
            writefile("MyeSniper/hasHopped.txt", "true")
        end
    end

    if readfile("MyeSniper/hasHopped.txt") == "false" then
        infoHanlder()
    else
        print("searching...")

        for i, k in pairs(game.Players:GetPlayers()) do
            suc, _ =
                pcall(
                function()
                    local f = e.getByOwnerId(k.UserId).Listings
                end
            )
            if suc then
                if tpToBooth then
                    for a, s in pairs(workspace.__THINGS.Booths:GetChildren()) do
                        if s.Info.BoothBottom.Frame.Top.Text:find(k.DisplayName) then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                                s.Table.CFrame * CFrame.new(5, 0, 0)
                        end
                    end
                end

                for i, v in pairs(e.getByOwnerId(k.UserId).Listings) do
                    if not v["Item"] then
                    end
                    for n, l in pairs(settings, settings2) do
                        local cost = v.DiamondCost
                        local itemType = v.Item._data.id
                        local amt = v.Item._data._am
                        local RAP = GetItemRAP(l.class, v.Item._data)
                        if amt ~= nil and cost ~= nil and money >= amt * cost then
                            if cost <= l.maxPrice and itemType == l.item then
                                if v.Item._data["tn"] then
                                    if tonumber(v.Item._data["tn"]) ~= l.tier then
                                    end
                                end

                                print("what??")

                                print(i)
                                if not i then
                                    writefile("MyeSniper/hasHopped.txt", "false")
                                    infoHanlder()
                                else
                                    local ohTable2 = {
                                        [i] = amt
                                    }

                                    game:GetService("ReplicatedStorage").Network.Booths_RequestPurchase:InvokeServer(
                                        k.UserId,
                                        ohTable2
                                    )
                                    webhook(itemType, amt, cost, k.DisplayName, (money - (cost * amt)), RAP)
                                    task.wait(2)
                                end
                            end
                        else
                            if amt ~= nil and cost ~= nil then
                                local newAmt = math.floor(money / cost)
                                if cost <= l.maxPrice and itemType == l.item then
                                    print(i)
                                    print("what?")
                                    if not i then
                                        writefile("MyeSniper/hasHopped.txt", "false")
                                        infoHanlder()
                                    else
                                        local ohTable2 = {
                                            [i] = newAmt
                                        }

                                        game:GetService("ReplicatedStorage").Network.Booths_RequestPurchase:InvokeServer(
                                            k.UserId,
                                            ohTable2
                                        )

                                        webhook(itemType, amt, cost, k.DisplayName, (money - (cost * amt)), RAP)
                                        task.wait(2)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        task.wait(0.3)
        print("checking if has hopped")
        task.wait(2)
        writefile("MyeSniper/hasHopped.txt", "false")
        while true do
            infoHanlder()
            task.wait(1)
        end
    end
else
    print("Mafaka Didnt Buy Whore hub buy today link has been copied to clipboard")
end
