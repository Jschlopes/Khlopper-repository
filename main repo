getgenv().settings = {
    {
        item = "Secret Key",
        maxPrice = 63500,
        class = "Misc",
    },

    {
        item = "Fruit Bundle",
        maxPrice = 700,
        class = "Misc",
    },

    {
        item = "Watermlon",
        maxPrice = 200,
        class = "Fruit",
    },

    {
        item = "Apple",
        maxPrice = 200,
        class = "Fruit",
    },

    {
        item = "Banana",
        maxPrice = 200,
        class = "Fruit",
    },

    {
        item = "Orange",
        maxPrice = 200,
        class = "Fruit",
    },

    {
        item = "Pineapple",
        maxPrice = 200,
        class = "Fruit",
    },

    {
        item = "Large Gift Bag",
        maxPrice = 10500,
        class = "Misc",
    },
}

getgenv().tpToBooth = true
getgenv().webhook = "https://discord.com/api/webhooks/1232160959326453770/4qR9sH_Ge2pIstUO_FkbenZUdkBjpcCXefcWbCbgOEAuGzJPcitqMXHAg9j85Xd5XfJD"


local function formatPrice(price)
    if price >= 1000 then
        local suffixes = { "", "k", "m", "b", "t" } -- Add more suffixes as needed
        local suffixIndex = 1

        while price >= 1000 do
            price = price / 1000
            suffixIndex = suffixIndex + 1
        end

        return string.format("%.0f%s", price, suffixes[suffixIndex])
    else
        return tostring(price)
    end
end

local save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
local function webhook(type, amt, price, seller, left, name)
    

    url = getgenv().webhook
    local data = {
        ["content"] = game.Players.LocalPlayer.Name .. " Sniped smething!",
        ["username"] = "snipe webhook",
        ["embeds"] = {
            {
                ["type"] = "rich",
                ["color"] = 16711680,
                ["author"] = {
                    ["name"] = "Gems left: " .. formatPrice(left),
                },
                ["fields"] = {
                    {
                        ["name"] = "Seller",
                        ["value"] = seller,
                        ["inline"] = true
                    },
                    {
                        ["name"] = "Item",
                        ["value"] = type,
                        ["inline"] = true
                    },
                    {
                        ["name"] = "Quantity",
                        ["value"] = amt,
                        ["inline"] = true
                    },
                    {
                        ["name"] = "Price",
                        ["value"] = formatPrice(price) .. " Diamonds (" .. formatPrice((amt * price)) .. ")",
                        ["inline"] = false
                    },
                  
                }

            }
        }
    }
    local newdata = game:GetService("HttpService"):JSONEncode(data)

    local headers = {
        ["content-type"] = "application/json"
    }

    request = http_request or request or HttpPost or syn.request
    local a = { Url = url, Body = newdata, Method = "POST", Headers = headers }

    request(a)
end

repeat task.wait() until game:IsLoaded()
repeat task.wait() until game.PlaceId ~= nil
repeat task.wait() until not game.Players.LocalPlayer.PlayerGui:FindFirstChild("__INTRO")
repeat task.wait() until game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
if game.PlaceId == 8737899170 or game.PlaceId == 16498369169 then
    local map = game:GetService("Workspace"):FindFirstChild('Map') or game:GetService("Workspace"):FindFirstChild('Map2')
    repeat task.wait() until #map:GetChildren() >= 25
    game:GetService("TeleportService"):Teleport(15502339080, game.Players.LocalPlayer)
elseif game.PlaceId == 15502339080 then
    repeat task.wait() until game:GetService("Workspace").__THINGS and game:GetService("Workspace").__DEBRIS
else
    print("wtf r u doing? what game r u even on dumb fuck")
end

repeat
    task.wait()
until game:GetService("Players").LocalPlayer:FindFirstChild("PlayerScripts")
    :FindFirstChild("Scripts")
    :FindFirstChild("Game")
    :FindFirstChild("Trading Plaza")
    :FindFirstChild("Booths Frontend")

print("loaded")

e = getsenv(game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.Game["Trading Plaza"]["Booths Frontend"])
local save = require(game:GetService("ReplicatedStorage").Library.Client.Save)

if not isfolder("butterTerminalFinder") then
    makefolder("butterTerminalFinder")
    task.wait(0.1)
    writefile("butterTerminalFinder/hasHopped.txt", "false")
end

local function getUserFromId(id)
    for i, v in pairs(game.Players:GetPlayers()) do
        if v.UserId == id then
            return v.DisplayName
        end
    end
    return nil
end

local inv
repeat
    task.wait()
    pcall(function() inv = save.Get()['Inventory'] end)
until inv ~= nil

local money = 0
for i, v in pairs(save.Get().Inventory.Currency) do
    if v.id == 'Diamonds' then
        money = v._am
    end
end

local randTable
local function infoHanlder()
    randTable = getgenv().settings[math.random(1, #getgenv().settings)]
    local ohString2
